import sys
import hashlib
import re

def hashcompare(ssh_key):

    md5_key = "40:d0:f7:e8:84:d0:19:d8:01:0e:93:82:47:b7:6e:52" 
    sha256_key = "e91c254ad58860a02c788dfb5c1a65d6a8846ab1dc649631c7db16fef4af2dec"
    # Enter your md5 and sha256 hashes of your public ssh key above.

    sha256_key = sha256_key.lower()
    md5_key = "".join(re.findall(r"[^:][\w]", md5_key)).lower() # Ensures md5_key and sha256 is in an easier to work with format and also lowercases them so they work against the comparison statements later on.

    ssh_valid = re.search("ssh-rsa", ssh_key) 
    if(ssh_valid == None):
        print("Ensure you have entered a valid SSH public key")
        return # Validating that we actually have a public ssh key, so that the user does not accidentally input a private key.

    ssh_md5 = hashlib.md5(ssh_key.encode())
    ssh_sha256 = hashlib.sha256(ssh_key.encode()) # Encoding and hashing the string given to us by the user.

    if (ssh_md5.hexdigest() != md5_key or ssh_sha256.hexdigest() != sha256_key):
        print("Your SSH key does not match to the stored hash values.")
        return False
    elif (ssh_md5.hexdigest() == md5_key and ssh_sha256.hexdigest() == sha256_key):
        print("Your SSH key matches to the stored hash values.")
        return True 
        # Finally we check against both keys to ensure that they match both. If they do then it passes the test.

hashcompare("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDXKTEi3yQk2SpUN9bPrE7IMfiLH+fWap+zSyfCe3BFIGksd0pvePdakhuYtojAiWFEIIODOEWjfehzxUhTDmY8iBhTAQN39VLKA9RjUcGhiC1WSzq1b8e+c/IHEXY+JIyG6EUAJIi7eq+Ln3k9pINIrlJ9PmKYKQruHHW4p9zMOEsW74247n9pJLKwMLwSQUbkPGX1XEFoyxAxWgX+fmONwRS5U5rFJFJF46tLuqi2RN6D427Mvwd+XnwHPbayfGlv9fycoez8eWidevWcduMDQmf803quemrT4TZRGuZmRR4PJWhI+k8zwv0tyx0UxMI3JvwfrfAhLkD+55CdGH= TestKey")